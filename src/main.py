# -*- coding:utf-8 -*-
# @author xupingmao
# @since 2022/01/26 10:18:40
# @modified 2022/03/16 22:43:48
# @filename main.py
import logging
import os
import sys
import argparse

# 配置日志模块
logging.basicConfig(level=logging.DEBUG,
    format='%(asctime)s|%(levelname)s|%(filename)s:%(lineno)d|%(message)s')

def read_header(fpath):
    with open(fpath, "r+", encoding="utf-8") as fp:
        return fp.read(1024)

def run_setup(dirname):
    for fname in os.listdir(dirname):
        fpath = os.path.join(dirname, fname)
        if not fname.endswith("setup.py"):
            continue
        cmd = "python3 %r build_ext --inplace" % fpath
        logging.info("Setup command: %s", cmd)
        logging.info("-" * 50)
        os.system(cmd)

def run_benchmark(dirname):
    for fname in sorted(os.listdir(dirname)):
        fpath = os.path.join(dirname, fname)
        fpath = os.path.abspath(fpath)

        cmd = None
        if fname.endswith("setup.py"):
            continue

        if fname.endswith(".c"):
            header = read_header(fpath)
            if "Generated by Cython" in header:
                logging.info("Skip Cython file")
                continue
            cmd = "gcc -O2 %r -o build/c.out && ./build/c.out" % fpath
        if fname.endswith(".cpp"):
            cmd = "g++ -O2 %r -o build/cpp.out && ./build/cpp.out" % fpath
        if fname.endswith(".py"):
            cmd = "python3 %s" % fpath
        if fname.endswith(".lua"):
            cmd = "lua %r" % fpath
        if fname.endswith(".go"):
            cmd = "go run %r" % fpath
        if fname.endswith(".java"):
            cmd = "javac %r && java -cp %r Main" % (fpath, dirname)

        if cmd is None:
            continue

        print("\n")
        logging.info("Command: %s", cmd)
        logging.info("-" * 50)
        os.system(cmd)

def run_clean(dirname):
    pass

def main(dirname):
    parser = argparse.ArgumentParser()
    parser.add_argument("--case_name", help="用例名称")
    args:dict = parser.parse_args()

    dirname = os.path.abspath(dirname)
    if not os.path.exists("build"):
        os.makedirs("build")
    
    case_name = args.case_name

    print("RUN case:(%s)" % case_name)

    for fname in os.listdir(dirname):
        if case_name != None and case_name != fname:
            continue

        fpath = os.path.join(dirname, fname)
        if os.path.isdir(fpath):
            # 部分脚本需要先安装(比如cython)
            run_setup(fpath)

            print("=" * 50)
            # 001_sum
            run_benchmark(fpath)
            # 删除中间文件
            run_clean(fpath)
        else:
            # skip
            pass

if __name__ == '__main__':
    main("./src")